from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from bot import db, config, utils
from bot.config import POSTBACK_CHANNEL_ID, IMG_START, INSTRUCTION, CHANGE_LANG, OPEN_SOFT, MAIN_MENU
from bot.filters import IsAdmin
from handler_utils import *
from keyboards import *

router = Router()

dict_text = {
    "ru": {
        'select_action': "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        'select_lang': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
        'access_denied': "<b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞!</b>\n\n‚óè –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –í–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–∞.\n\n–ù–µ –∑–∞–±—É–¥—å —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥, –¥–ª—è –ª—É—á—à–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö \n\n–ü–†–û–ú–û–ö–û–î: {promoCode}",
        'access_granted': "‚úÖ –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç! ",
        'instruction': "üëã –ú–µ–Ω—è –∑–æ–≤—É—Ç –ö–æ—Ä—Ç–µ—Å. –Ø –∏ –º–æ—è –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª–∏ —Å–æ—Ñ—Ç, –∫–æ—Ç–æ—Ä—ã–º –ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ø–æ–≤—ã–µ —Å—Ç—Ä–∏–º–µ—Ä—ã: *EVELONE, Mellstroy, MOCRIVSKY, Zubareff* –∏ –¥—Ä—É–≥–∏–µ.\n\n"
                       "üéØ –û–Ω –ø–æ–º–æ–≥–∞–µ—Ç –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å –≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ, —á—Ç–æ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é. –°–æ—Ñ—Ç –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç—Å—è –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É 1WIN —á–µ—Ä–µ–∑ —Ö—ç—à-–∫–æ–¥—ã –∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.\n\n"
                       "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≥–æ–≤–æ—Ä–∏—Ç —Å–∞–º–∞ –∑–∞ —Å–µ–±—è ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç –≤—ã–∏–≥—Ä—ã—à–µ–π –∏ –≤—ã—Å–æ–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤.\n\n"
                       "üöÄ *–ö–∞–∫ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Å–æ—Ñ—Ç–æ–º:*\n\n"
                       "1Ô∏è‚É£ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ (–¥–∞–∂–µ –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç ‚Äî –Ω—É–∂–µ–Ω –Ω–æ–≤—ã–π).\n"
                       "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Å–ª–æ—Ç:\n"
                       "‚Ä¢ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≥—Ä–µ—Ç—ã—Ö üî•\n"
                       "‚Ä¢ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫ üîé\n"
                       "‚Ä¢ –∏–∑ —Ç–æ–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üë•\n"
                       "3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —Å–ª–æ—Ç–∞ üñºÔ∏è\n"
                       "4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ‚Äú–ê–Ω–∞–ª–∏–∑‚Äù ‚Äî –ø–æ–ª—É—á–∏—Ç–µ —Å–∏–≥–Ω–∞–ª üéØ\n"
                       "5Ô∏è‚É£ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                       "_‚Äú–ë–æ–Ω—É—Å —á–µ—Ä–µ–∑ 20 —Å–ø–∏–Ω–æ–≤, —à–∞–Ω—Å 88%‚Äù_ ‚Üí –¥–µ–ª–∞–µ–º 19 —Å–ø–∏–Ω–æ–≤ –ø–æ –º–∏–Ω–∏–º–∞–ª–∫–µ –∏ –Ω–∞ 20-–º –ø–æ–≤—ã—à–∞–µ–º —Å—Ç–∞–≤–∫—É üí∏\n\n"
        ,

        'hello': "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∑–∞–∫—Ä—ã—Ç—É—é —Å–∏—Å—Ç–µ–º—É –æ—Ç –ö–æ—Ä—Ç–µ—Å–∞!\n\n"
                 "–ó–¥–µ—Å—å ‚Äî —Å–æ—Ñ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Ç–æ–ø–æ–≤—ã–µ —Å—Ç—Ä–∏–º–µ—Ä—ã, —á—Ç–æ–±—ã –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å –≤ –ø—Ä—è–º–æ–º —ç—Ñ–∏—Ä–µ –∏ –∑–∞–±–∏—Ä–∞—Ç—å –∂–∏—Ä–Ω—ã–µ –±–æ–Ω—É—Å—ã üí∏\n\n"
                 "–ì–æ—Ç–æ–≤ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∏–Ω—Å–∞–π–¥—É? –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
    },
    "en": {
        'select_action': "Select an action:",
        'select_lang': 'Select language:',
        'access_denied': "<b>Registration not completed!</b>\n\n‚óè Once registration is completed, you will automatically receive a notification from the bot.\n\nPROMOCODE: {promoCode}",
        'access_granted': "‚úÖ Access granted! <a href='https://example.com'>Open Software</a>",
        'instruction': "üëã My name is Cortez. My team and I have developed software that is used by top streamers: *EVELONE, Mellstroy, MOCRIVSKY, Zubareff* and others.\n\n"
                       "üéØ It helps you win live, which attracts a new audience. The software is linked to your 1WIN account through hash codes and internal platform scripts.\n\n"
                       "üìä User statistics speak for themselves ‚Äî a steady increase in winnings and high signal accuracy.\n\n"
                       "üöÄ *How to start working with the software:*\n\n"
                       "1Ô∏è‚É£ Register through our bot (even if you already have an account, you'll need a new one).\n"
                       "2Ô∏è‚É£ Select the desired slot:\n"
                       "‚Ä¢ from the list of warmed-up üî•\n"
                       "‚Ä¢ via search üîé\n"
                       "‚Ä¢ from the top of users üë•\n"
                       "3Ô∏è‚É£ Upload a screenshot or photo of the slot üñºÔ∏è\n"
                       "4Ô∏è‚É£ Click ‚ÄúAnalysis‚Äù and receive a signal üéØ\n"
                       "5Ô∏è‚É£ Follow the instructions, for example:\n"
                       "_‚ÄúBonus after 20 spins, 88% chance‚Äù_ ‚Üí make 19 spins at the minimum and increase the bet on the 20th spin üí∏\n\n",
        'hello': "üî• Welcome to the private system from Cortez!\n\n"
                 "Here is the software that top streamers use to win live streams and earn big bonuses üí∏\n\n"
                 "Ready to join the insider? Click on the button below üëá"
    }
}


@router.message(F.text == "/start")
async def start_handler(message: Message, state: FSMContext):
    await state.clear()
    if message.from_user.id == config.ADMIN_ID:
        await admin_entry(message=message)
        return
    user = db.get_user(message.from_user.id)
    if not user:
        db.add_user(message.from_user.id)
    lang = db.get_language(message.from_user.id)

    await safe_send_photo(
        event=message,
        photo=IMG_START,
        caption=dict_text[lang]['hello'],
        reply_markup=start_keyboard()
    )


@router.callback_query(F.data == "Continue")
async def continue_handler(event: CallbackQuery):
    await safe_answer(event)
    await safe_delete(event)
    lang = db.get_language(event.from_user.id)
    await safe_send_photo(
        event=event,
        photo=MAIN_MENU,
        caption=dict_text[lang]['select_action'],
        reply_markup=main_menu(db.is_registered(event.from_user.id), lang)
    )


@router.callback_query(F.data == "ChangeLang")
async def change_language(event: CallbackQuery):
    await safe_answer(event)
    await safe_delete(event)
    lang = db.get_language(event.from_user.id)
    await safe_send_photo(
        event=event,
        photo=CHANGE_LANG,
        caption=dict_text[lang]['select_lang'],
        reply_markup=language_keyboard()
    )


@router.callback_query(F.data.startswith("lang_"))
async def set_language(event: CallbackQuery):
    await safe_answer(event)
    await safe_delete(event)
    lang = event.data.split("_")[1]
    db.update_language(event.from_user.id, lang)
    await safe_send_photo(
        event=event,
        photo=MAIN_MENU,
        caption=dict_text[lang]['select_action'],
        reply_markup=main_menu(db.is_registered(event.from_user.id), lang)
    )


@router.callback_query(F.data == "Instruction")
async def instructions(event: CallbackQuery):
    await safe_delete(event)
    await safe_answer(event)

    lang = db.get_language(event.from_user.id)
    await safe_send_photo(
        event=event,
        photo=INSTRUCTION,
        caption=dict_text[lang]['instruction'],
        reply_markup=main_menu(db.is_registered(event.from_user.id), lang)
    )


@router.callback_query(F.data == "OpenSoft")
async def open_software(event: CallbackQuery):
    await safe_answer(event)
    await safe_delete(event)
    ref_link, promo = db.get_settings()

    user_id = event.from_user.id
    lang = db.get_language(user_id)
    if not utils.check_registration(user_id):
        await safe_send_photo(
            event=event,
            photo=OPEN_SOFT,
            caption=dict_text[lang]['access_denied'].format(promoCode=promo),
            reply_markup=register(lang=lang, user_tg_id=event.from_user.id, reflink=ref_link)
        )
        return

    await safe_send_photo(
        event=event,
        photo=OPEN_SOFT,
        caption=dict_text[lang]['access_granted'],
        reply_markup=open_soft(lang)
    )


@router.message(F.text == "/admin", IsAdmin())
async def admin_entry(message: Message):
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞:", reply_markup=admin_panel())


@router.callback_query(F.data == "MyAdminData", IsAdmin())
async def my_data(event: CallbackQuery, state: FSMContext):
    await state.clear()
    ref_link, promo = db.get_settings()
    await safe_answer(event)
    await safe_edit_text(
        event,
        text=f"üîó –†–µ—Ñ.—Å—Å—ã–ª–∫–∞:\n{ref_link}\n\nüéÅ –ü—Ä–æ–º–æ–∫–æ–¥:\n{promo}",
        reply_markup=admin_panel()
    )


@router.callback_query(F.data == "Statistic", IsAdmin())
async def stats(event: CallbackQuery, state: FSMContext):
    await state.clear()
    total, reg, dep, block = db.get_stats()
    await safe_answer(event)
    await safe_edit_text(
        event,
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: {reg}\nüí∞ –° –¥–µ–ø–æ–∑–∏—Ç–æ–º: {dep}\n‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {block}",
        reply_markup=admin_panel()
    )


class Mailing(StatesGroup):
    message = State()


@router.callback_query(F.data == "Mailing", IsAdmin())
async def broadcast_prompt(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await safe_answer(event)
    await safe_edit_text(event, "–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    await state.set_state(Mailing.message)


@router.message(Mailing.message, IsAdmin())
async def broadcast_send(message: types.Message, state: FSMContext):
    await state.clear()
    try:
        cursor = db.conn.cursor()
        cursor.execute("SELECT user_id FROM users WHERE blocked = 0")
        users = cursor.fetchall()
        cursor.close()
        send, not_send = await safe_send_all(
            text=message.text,
            users=users
        )

        await message.answer(
            text=f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n\n–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n–ü–æ–ª—É—á–∏–ª–∏: {send}\n–ù–µ –ø–æ–ª—É—á–∏–ª–∏: {not_send}",
            reply_markup=admin_panel()
        )
    except Exception as e:
        print(e)
        await message.answer(
            text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î: {e}",
            reply_markup=admin_panel()
        )


class DataToUpdate(StatesGroup):
    update = State()


@router.callback_query(F.data == "UpdateAdminData", IsAdmin())
async def start_update_data(event: CallbackQuery, state: FSMContext):
    await state.clear()
    await safe_answer(event)
    await safe_edit_text(event, text="–í—ã–±–µ—Ä–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", reply_markup=data_to_update())


@router.callback_query(F.data.startswith("UpdateTo:"), IsAdmin())
async def select_option_update(event: CallbackQuery, state: FSMContext):
    await safe_answer(event)
    param = event.data.split(":")[1]
    await state.update_data(param=param)

    if param == "ref_link":
        await safe_edit_text(event, text="–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É")
    elif param == "promo_code":
        await safe_edit_text(event, text="–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥")

    await state.set_state(DataToUpdate.update)


@router.message(DataToUpdate.update, IsAdmin())
async def update_admin(event: Message, state: FSMContext):
    data = await state.get_data()
    await state.clear()
    value = event.text
    updated = db.update(param=data['param'], value=value)
    if not updated:
        await event.answer(
            text="–ü—Ä–∏ –æ–±–≤–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫",
            reply_markup=admin_panel()
        )
        return

    if data['param'] == 'ref_link':
        await event.answer(
            text=f"–†–µ—Ñ. —Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n\n–¢–µ–∫—É—â–∞—è —Ä–µ—Ñ. —Å—Å—ã–ª–∫–∞: {event.text}",
            reply_markup=admin_panel()
        )
    elif data['param'] == 'promo_code':
        await event.answer(
            text=f"–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n\n–¢–µ–∫—É—â–∏–π –ø—Ä–æ–º–æ–∫–æ–¥: {event.text}",
            reply_markup=admin_panel()
        )


@router.channel_post(F.chat.id == int(POSTBACK_CHANNEL_ID), IsAdmin())
async def postback_handler(event: Message):
    try:
        text = event.text
        if '|' not in text and 'Firstdep' not in text:
            user_id = int(text)
            user = db.get_user(user_id)
            if not user:
                db.add_user(user_id)
            db.set_registered(user_id)
            await bot.send_message(
                chat_id=POSTBACK_CHANNEL_ID,
                text=f"<strong>‚úÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ‚úÖ</strong>\n\n"
                     f"üßëüèª‚Äçüíª: {user_id}\n"
                     f"–ü—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –í–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!"
            )
            lang = db.get_language(user_id)
            try:
                await bot.send_photo(
                    chat_id=user_id,
                    photo=FSInputFile(path=OPEN_SOFT),
                    caption=dict_text[lang]['access_granted'],
                    reply_markup=open_soft(lang=lang)
                )
            except Exception as e:
                print(e)

        elif '|' in text and len(text.split('|')) and 'Firstdep' not in text:
            parts = text.split('|')

            user_id = int(parts[0].strip())
            country = str(parts[1].strip())
            amount = float(parts[2].strip())
            await bot.send_message(
                chat_id=POSTBACK_CHANNEL_ID,
                text=f"<strong>üíµ –î–ï–ü–û–ó–ò–¢ üíµ</strong>\n\n"
                     f"üßëüèª‚Äçüíª: {user_id} [–ù–µ—Ç –≤ –±–∞–∑–µ]\n"
                     f"üó∫: {country}\n"
                     f"üíµ: {amount}",
            )
        elif '|' in text and 'Firstdep' in text:
            parts = text.split('|')
            user_id = int(parts[0].strip())
            amount = float(parts[2].strip())
            dep = db.get_deposit(user_id)
            if dep is None:
                db.update_deposited(user_id)
                await bot.send_message(
                    chat_id=POSTBACK_CHANNEL_ID,
                    text=f"<strong>üî• –ü–ï–†–í–´–ô –î–ï–ü–û–ó–ò–¢ üî•</strong>\n\n"
                         f"üßëüèª‚Äçüíª: {user_id} [–ù–µ—Ç –≤ –±–∞–∑–µ]\n"
                         f"üíµ: {amount}",
                )
                return
            await bot.send_message(
                chat_id=POSTBACK_CHANNEL_ID,
                text=f"<strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç</strong>"
            )

    except Exception as e:
        await event.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
