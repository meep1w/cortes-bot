from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery

from bot import db, config, utils
from bot.config import POSTBACK_CHANNEL_ID
from create import bot
from keyboards import *

router = Router()


@router.message(F.text == "/start")
async def start_handler(message: Message):
    if message.from_user.id == config.ADMIN_ID:
        await admin_entry(message=message)
        return
    db.add_user(message.from_user.id)
    lang = db.get_language(message.from_user.id)
    text = {
        "ru": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        "en": "üëã Welcome!\nPress the button below to continue."
    }
    await message.answer(text[lang], reply_markup=start_keyboard())


@router.message(F.text == "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
async def continue_handler(message: Message):
    lang = db.get_language(message.from_user.id)
    text = {
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        "en": "Select an action:"
    }
    await message.answer(text[lang], reply_markup=main_menu(lang))


@router.message(F.text.in_(["–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "Change Language"]))
async def change_language(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", reply_markup=language_keyboard())


@router.callback_query(F.data.startswith("lang_"))
async def set_language(call: CallbackQuery):
    lang = call.data.split("_")[1]
    db.update_language(call.from_user.id, lang)
    await call.message.answer("–Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω.")
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu(lang))
    await call.answer()


@router.message(F.text.in_(["–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", "Instructions"]))
async def instructions(message: Message):
    lang = db.get_language(message.from_user.id)
    text = {
        "ru": "üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ.\n2. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥.\n3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–Ω–∏-–∞–ø–ø.",
        "en": "üìò Instructions:\n1. Register via the link.\n2. Enter the promo code.\n3. Launch the mini app."
    }
    await message.answer(text[lang])


@router.message(F.text.in_(["–ü–æ–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è", "Terms of Use"]))
async def terms(message: Message):
    lang = db.get_language(message.from_user.id)
    text = {
        "ru": "‚öñ –ü–æ–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n–≠—Ç–æ —à–∞–±–ª–æ–Ω –ø–æ–ª–∏—Ç–∏–∫–∏.",
        "en": "‚öñ Terms of Use:\nThis is a terms template."
    }
    await message.answer(text[lang])


@router.message(F.text.in_(["–û—Ç–∫—Ä—ã—Ç—å —Å–æ—Ñ—Ç", "Open Software"]))
async def open_software(message: Message):
    if message.from_user.id == config.ADMIN_ID:
        await message.answer("–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å —Å–æ—Ñ—Ç", reply_markup=miniapp())
        return
    user_id = message.from_user.id
    lang = db.get_language(user_id)
    if utils.check_registration(user_id):
        text = {
            "ru": "‚úÖ –î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç! [–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–æ—Ñ—Ç](https://example.com)",
            "en": "‚úÖ Access granted! [Open Software](https://example.com)"
        }
        await message.answer(text[lang], reply_markup=miniapp())
    else:
        text = {
            "ru": "üö´ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ.",
            "en": "üö´ You need to register via the referral link."
        }
        ref_link, promo = db.get_settings()
        await message.answer(f"{text[lang]}\n\nüîó {ref_link}\n\nüéÅ –ü—Ä–æ–º–æ–∫–æ–¥: {promo}")


@router.message(F.from_user.id == config.ADMIN_ID, F.text == "/admin")
async def admin_entry(message: Message):
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞:", reply_markup=admin_panel())


@router.message(F.from_user.id == config.ADMIN_ID, F.text == "–ú–æ–∏ –¥–∞–Ω–Ω—ã–µ")
async def my_data(message: Message):
    ref_link, promo = db.get_settings()
    await message.answer(f"üîó –†–µ—Ñ.—Å—Å—ã–ª–∫–∞:\n{ref_link}\n\nüéÅ –ü—Ä–æ–º–æ–∫–æ–¥:\n{promo}")


@router.message(F.from_user.id == config.ADMIN_ID, F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats(message: Message):
    total, reg, dep, block = db.get_stats()
    await message.answer(
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}\n‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: {reg}\nüí∞ –° –¥–µ–ø–æ–∑–∏—Ç–æ–º: {dep}\n‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: {block}"
    )


class Mailing(StatesGroup):
    message = State()


@router.message(F.from_user.id == config.ADMIN_ID, F.text == "–†–∞—Å—Å—ã–ª–∫–∞")
async def broadcast_prompt(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
    await state.set_state(Mailing.message)


@router.message(F.from_user.id == config.ADMIN_ID, Mailing.message)
async def broadcast_send(message: types.Message, state: FSMContext):
    text = message.text
    try:
        cursor = db.conn.cursor()
        cursor.execute("SELECT user_id FROM users WHERE blocked = 0")
        users = cursor.fetchall()
        cursor.close()
        for u in users:
            try:
                await bot.send_message(u[0], text)
            except Exception as e:
                print(e)
                db.set_blocked(u[0])
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    except Exception as e:
        print(e)
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î: {e}")
    await state.clear()


@router.channel_post(F.chat.id == int(POSTBACK_CHANNEL_ID))
async def postback_handler(event: Message):
    try:
        text = event.text
        if '|' not in text and 'Firstdep' not in text:
            user_id = int(text)
            user = db.get_user(user_id)
            if not user:
                db.add_user(user_id)
            db.set_registered(user_id)
            await bot.send_message(
                chat_id=POSTBACK_CHANNEL_ID,
                text=f"<strong>‚úÖ –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ‚úÖ</strong>\n\n"
                     f"üßëüèª‚Äçüíª: {user_id}\n"
                     f"–ü—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ –í–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!"
            )
        elif '|' in text and len(text.split('|')) and 'Firstdep' not in text:
            parts = text.split('|')

            user_id = int(parts[0].strip())
            country = str(parts[1].strip())
            amount = float(parts[2].strip())
            await bot.send_message(
                chat_id=POSTBACK_CHANNEL_ID,
                text=f"<strong>üíµ –î–ï–ü–û–ó–ò–¢ üíµ</strong>\n\n"
                     f"üßëüèª‚Äçüíª: {user_id} [–ù–µ—Ç –≤ –±–∞–∑–µ]\n"
                     f"üó∫: {country}\n"
                     f"üíµ: {amount}",
            )
        elif '|' in text and 'Firstdep' in text:
            parts = text.split('|')
            user_id = int(parts[0].strip())
            amount = float(parts[2].strip())
            dep = db.get_deposit(user_id)
            if dep is None:
                db.update_deposited(user_id)
                await bot.send_message(
                    chat_id=POSTBACK_CHANNEL_ID,
                    text=f"<strong>üî• –ü–ï–†–í–´–ô –î–ï–ü–û–ó–ò–¢ üî•</strong>\n\n"
                         f"üßëüèª‚Äçüíª: {user_id} [–ù–µ—Ç –≤ –±–∞–∑–µ]\n"
                         f"üíµ: {amount}",
                )
                return
            await bot.send_message(
                chat_id=POSTBACK_CHANNEL_ID,
                text=f"<strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç</strong>"
            )

    except Exception as e:
        await event.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
